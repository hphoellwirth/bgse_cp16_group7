t(chol(A))
L[2,2] <- sqrt(A[2,2] - sum(L[2,seq(1,i-1)**2]))
L
L[i,seq(1,i-1)**2]
L[2,seq(1,i-1)**2]
L[2,2] <- sqrt(A[2,2] - sum(L[2,seq(1,2-1)**2]))
L
t(chol(A))
L[2,seq(1,2-1)**2]
L[2,seq(1,2-1)]
L[2,seq(1,2-1)]**2
L[2,2] <- sqrt(A[2,2] - sum(L[2,seq(1,2-1)]**2))
L
t(chol(A))
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 1)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 1)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
t(chol(A))
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
t(chol(A))
L[i,seq(1,0)]
L[1,seq(1,0)]
L[1,seq(1,1-1)]
A
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
A <- matrix( c(3,2,1,2,4,1,1,1,5), 3, 3)
my.chol(A)
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == -1)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == -1)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
t(chol(A))
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
}
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
}
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
return(x)
}
my.forward.solve()
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
return(x)
}
for (i in 3:1) print(i)
my.back.solve <- function(U, b) {
n <- length(b)
x <- rep(0,n)
# using backward substitution
for (i in n:1) {
x[i] <- (b[i] - L[i,seq(i+1,n)] %*% x[seq(i+1,n)]) / L[i,i]
}
return(x)
}
my.solve <- function(A, b) {
L <- my.chol(A)
y <- my.forward.solve(L,b)
x <- my.back.solve(t(L),y)
}
b <- c(4,2,1)
solve(A,b)
solve(A)%*%b
my.solve(A,b)
L <- my.chol(A)
y <- my.forward.solve(L,b)
x <- my.back.solve(t(L),y)
y
U <- t(L)
b <- y
x[3] <- (b[3] - U[3,seq(3+1,3)] %*% x[seq(3+1,3)]) / U[3,3]
seq(4,3)
x[2] <- (b[2] - U[2,seq(2+1,2)] %*% x[seq(2+1,2)]) / U[2,2]
seq(1,0)
my.back.solve <- function(U, b) {
n <- length(b)
x <- rep(0,n)
# using backward substitution
x[n] <- b[n] / U[n,n]
for (i in (n-1):1) {
x[i] <- (b[i] - U[i,seq(i+1,n)] %*% x[seq(i+1,n)]) / U[i,i]
}
return(x)
}
x <- my.back.solve(t(L),y)
x
b <- c(4,2,1)
b
solve(A,b)
round (cbind(x, solve(A,b),3))
my.solve(A,b)
x <- my.solve(A,b)
x
solve(A)%*%b
my.solve <- function(A, b) {
L <- my.chol(A)
y <- my.forward.solve(L,b)
x <- t(my.back.solve(t(L),y))
}
solve(A)%*%b
solve(A,b)
L <- my.chol(A)
L
y <- my.forward.solve(L,b)
y
my.back.solve(t(L),y)
solve(A,b)
solve(A)%*%b
b <- c(4,2,1)
b
A
solve(A,b)
solve(A,t(b)
)
b <- matrix(c(4,2,1), 3,1)
b
b <- c(4,2,1)
t(b)
b
x
round(cbind(x, solve(A)%*%b),3)
x
solve(A)%*%b
round(cbind(x, solve(A,b),3)
)
solve(A,b)
round(cbind(x, solve(A,b)),3)
round(cbind(x, solve(A)%*%b),3)
suppressMessages(if(!require(openxlsx)){install.packages("openxlsx")})
suppressMessages(if(!require(RMySQL)){install.packages("RMySQL")})
suppressMessages(if(!require(mgcv)){install.packages("mgcv")})
suppressMessages(library("openxlsx"))
suppressMessages(library("RMySQL"))
suppressMessages(library("mgcv"))
setwd("/Users/Hans-Peter/Documents/Masters/14D003/project")
loadFileName <- "data/Air pollutant concentrations 2012 - Dataset complete.xlsx"
# load data
dat_PM10  <- read.xlsx(loadFileName, sheet = 2, startRow = 11, colNames = TRUE)
dat_NO2   <- read.xlsx(loadFileName, sheet = 5, startRow = 11, colNames = TRUE)
dat_O3    <- read.xlsx(loadFileName, sheet = 8, startRow = 11, colNames = TRUE)
dat_PM2.5 <- read.xlsx(loadFileName, sheet = 11, startRow = 11, colNames = TRUE)
dat_BaP   <- read.xlsx(loadFileName, sheet = 14, startRow = 11, colNames = TRUE)
View(dat_PM10)
View(dat_PM10)
countries <- uniquecombs(rbind(data.frame(code = paste0("\"",dat_NO2$country_iso_code,"\""),
name = paste0("\"",dat_NO2$country_name,"\""),
pctTraffic = dat_NO2$percentage_traffic_population),
data.frame(code = paste0("\"",dat_O3$country_iso_code,"\""),
name = paste0("\"",dat_O3$country_name,"\""),
pctTraffic = dat_O3$percentage_traffic_population),
data.frame(code = paste0("\"",dat_PM10$country_iso_code,"\""),
name = paste0("\"",dat_PM10$country_name,"\""),
pctTraffic = dat_PM10$percentage_traffic_population),
data.frame(code = paste0("\"",dat_PM2.5$country_iso_code,"\""),
name = paste0("\"",dat_PM2.5$country_name,"\""),
pctTraffic = dat_PM2.5$percentage_traffic_population),
data.frame(code = paste0("\"",dat_BaP$country_iso_code,"\""),
name = paste0("\"",dat_BaP$country_name,"\""),
pctTraffic = dat_BaP$percentage_traffic_population)))
inserts <- apply(countries, 1, paste, collapse = ", ")
query <- paste("INSERT INTO country",
"(countryID, countryName, pctTraffic)",
"VALUES (", paste(inserts, collapse = "), ("), ");")
query
rm(list = ls())
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
for (i in 1:4){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
rm(list = ls())
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 5, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
for (i in 1:4){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
rm(list = ls())
x <- seq(-4, 4, length=100)
alpha <- c(1, 2, 2, 5, 7)
beta  <- c(2, 1, 3, 0.1, 2)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3", "a=5 b=0.1", "a=7 b=2")
plot(x, 1, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
rm(list = ls())
x <- seq(-4, 4, length=100)
alpha <- c(1, 2, 2, 5, 7)
beta  <- c(2, 1, 3, 0.1, 2)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3", "a=5 b=0.1", "a=7 b=2")
plot(x, 5, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
rm(list = ls())
x <- seq(-4, 4, length=100)
alpha <- c(1, 2, 2, 5, 7)
beta  <- c(2, 1, 3, 0.1, 2)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3", "a=5 b=0.1", "a=7 b=2")
plot.new()
plot(x, 5, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
rm(list = ls())
x <- seq(0, 10, length=100)
alpha <- c(1, 2, 2, 5, 7)
beta  <- c(2, 1, 3, 0.1, 2)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3", "a=5 b=0.1", "a=7 b=2")
plot.new()
plot(x, 10, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
plot.new()
rm(list = ls())
x <- seq(0, 10, length=100)
alpha <- c(1, 2, 2, 5, 7)
beta  <- c(2, 1, 3, 0.1, 2)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3", "a=5 b=0.1", "a=7 b=2")
plot(x, 10, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
plot.new()
rm(list = ls())
x <- seq(0, 10, length=100)
alpha <- c(1, 2, 2, 5, 7)
beta  <- c(2, 1, 3, 0.1, 2)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3", "a=5 b=0.1", "a=7 b=2")
plot(x, 10, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
plot(x, x, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=2, col=colors[i])
}
plot(x, x, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=1, col=colors[i])
}
plot(x, dgamma(x,alpha[1],beta[1]), type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=1, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
# Display the Gamma distribution with various
# shape and rate values
rm(list = ls())
x <- seq(0, 10, length=100)
alpha <- c(0.1, 0.333, 1, 5, 7)
beta  <- c(2, 2, 2, 0.1, 2)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3", "a=5 b=0.1", "a=7 b=2")
plot(x, dgamma(x,alpha[1],beta[1]), type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:5){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=1, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
rm(list = ls())
x <- seq(0, 10, length=100)
alpha <- c(0.1, 0.333, 1)
beta  <- c(2, 2, 2)
colors <- c("red", "blue", "darkgreen")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3")
plot(x, dgamma(x,alpha[1],beta[1]), type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:3){
lines(x, dgamma(x,alpha[i],beta[i]), lwd=1, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
rm(list = ls())
x <- seq(0, 10, length=100)
alpha <- c(0.1, 0.333, 1)
beta  <- c(2, 2, 2)
colors <- c("red", "blue", "darkgreen")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3")
plot(x, dnorm(x,0,alpha[1]), type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
rm(list = ls())
x <- seq(-2, 2, length=100)
alpha <- c(0.1, 0.333, 1)
beta  <- c(2, 2, 2)
colors <- c("red", "blue", "darkgreen")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3")
plot(x, dnorm(x,0,alpha[1]), type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
rm(list = ls())
x <- seq(-2, 2, length=100)
alpha <- c(0.1, 0.333, 1)
beta  <- c(2, 2, 2)
colors <- c("red", "blue", "darkgreen")
labels <- c("a=1 b=2", "a=2 b=1", "a=2 b=3")
plot(x, log(dnorm(x,0,alpha[1])), type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of Gamma Distributions")
for (i in 1:3){
lines(x, log(dnorm(x,0,alpha[i])), lwd=1, col=colors[i])
}
