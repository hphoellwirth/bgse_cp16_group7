for (i in 1:n) {
for (j in 1:i) {
if (i == j)
L[i,j] <- 1
else
L[i,j] <- 2
}
}
return (L)
}
my.chol(A)
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
if (i == j) {
L[i,j] <- 1
}
else if {
L[i,j] <- 2
}
}
}
return (L)
}
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
if (i == j) {
L[i,j] <- 1
}
else
L[i,j] <- 2
}
}
}
return (L)
}
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
if (i == j)
L[i,j] <- 1
else
L[i,j] <- 2
}
}
return (L)
}
A[1,seq(1,3)]
A
A[1,seq(2,3)]
A[1,seq(4,3)]
for (i in 1:0) print(i)
A[1,seq(2,3)]
3 - A[1,seq(2,3)]
3 - sum(A[1,seq(2,3)])
4 - sum(A[1,seq(2,3)])
A[1,seq(2,3)]
prod(A[1,seq(2,3)])
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i > 1)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)**2]))
}
# compute lower non-diagonal elements of L
else {
if (i > 1)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
t(chol(A))
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 1)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)**2]))
}
# compute lower non-diagonal elements of L
else {
if (i == 1)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
L[1,1] <- sqrt(A[1,1])
t(chol(A))
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 1)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)**2]))
}
# compute lower non-diagonal elements of L
else {
if (j == 1)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
L[2,1] <- A[2,1] / L[1,1]
t(chol(A))
L[2,2] <- sqrt(A[2,2] - sum(L[2,seq(1,i-1)**2]))
L
L[i,seq(1,i-1)**2]
L[2,seq(1,i-1)**2]
L[2,2] <- sqrt(A[2,2] - sum(L[2,seq(1,2-1)**2]))
L
t(chol(A))
L[2,seq(1,2-1)**2]
L[2,seq(1,2-1)]
L[2,seq(1,2-1)]**2
L[2,2] <- sqrt(A[2,2] - sum(L[2,seq(1,2-1)]**2))
L
t(chol(A))
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 1)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 1)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
t(chol(A))
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
t(chol(A))
L[i,seq(1,0)]
L[1,seq(1,0)]
L[1,seq(1,1-1)]
A
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == 0)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == 0)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
A <- matrix( c(3,2,1,2,4,1,1,1,5), 3, 3)
my.chol(A)
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
if (i == -1)
L[i,i] <- sqrt(A[i,i])
else
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
if (j == -1)
L[i,j] <- A[i,j] / L[j,j]
else
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
my.chol <- function(A) {
n <- dim(A)[1]
L <- matrix (rep(0,n*n), n, n)
for (i in 1:n) {
for (j in 1:i) {
# compute diagonal elements of L
if (i == j) {
L[i,i] <- sqrt(A[i,i] - sum(L[i,seq(1,i-1)]**2))
}
# compute lower non-diagonal elements of L
else {
L[i,j] <- (A[i,j] - sum(L[i,seq(1,j-1)] %*% L[j,seq(1,j-1)])) / L[j,j]
}
}
}
return (L)
}
my.chol(A)
t(chol(A))
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
}
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
}
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
return(x)
}
my.forward.solve()
my.forward.solve <- function(L, b) {
n <- length(b)
x <- rep(0,n)
# using forward substitution
for (i in 1:n) {
x[i] <- (b[i] - L[i,seq(1,i-1)] %*% x[seq(1,i-1)]) / L[i,i]
}
return(x)
}
for (i in 3:1) print(i)
my.back.solve <- function(U, b) {
n <- length(b)
x <- rep(0,n)
# using backward substitution
for (i in n:1) {
x[i] <- (b[i] - L[i,seq(i+1,n)] %*% x[seq(i+1,n)]) / L[i,i]
}
return(x)
}
my.solve <- function(A, b) {
L <- my.chol(A)
y <- my.forward.solve(L,b)
x <- my.back.solve(t(L),y)
}
b <- c(4,2,1)
solve(A,b)
solve(A)%*%b
my.solve(A,b)
L <- my.chol(A)
y <- my.forward.solve(L,b)
x <- my.back.solve(t(L),y)
y
U <- t(L)
b <- y
x[3] <- (b[3] - U[3,seq(3+1,3)] %*% x[seq(3+1,3)]) / U[3,3]
seq(4,3)
x[2] <- (b[2] - U[2,seq(2+1,2)] %*% x[seq(2+1,2)]) / U[2,2]
seq(1,0)
my.back.solve <- function(U, b) {
n <- length(b)
x <- rep(0,n)
# using backward substitution
x[n] <- b[n] / U[n,n]
for (i in (n-1):1) {
x[i] <- (b[i] - U[i,seq(i+1,n)] %*% x[seq(i+1,n)]) / U[i,i]
}
return(x)
}
x <- my.back.solve(t(L),y)
x
b <- c(4,2,1)
b
solve(A,b)
round (cbind(x, solve(A,b),3))
my.solve(A,b)
x <- my.solve(A,b)
x
solve(A)%*%b
my.solve <- function(A, b) {
L <- my.chol(A)
y <- my.forward.solve(L,b)
x <- t(my.back.solve(t(L),y))
}
solve(A)%*%b
solve(A,b)
L <- my.chol(A)
L
y <- my.forward.solve(L,b)
y
my.back.solve(t(L),y)
solve(A,b)
solve(A)%*%b
b <- c(4,2,1)
b
A
solve(A,b)
solve(A,t(b)
)
b <- matrix(c(4,2,1), 3,1)
b
b <- c(4,2,1)
t(b)
b
x
round(cbind(x, solve(A)%*%b),3)
x
solve(A)%*%b
round(cbind(x, solve(A,b),3)
)
solve(A,b)
round(cbind(x, solve(A,b)),3)
round(cbind(x, solve(A)%*%b),3)
rm(list = ls())
# install/load libraries
suppressMessages(if(!require(openxlsx)){install.packages("openxlsx")})
suppressMessages(if(!require(RMySQL)){install.packages("RMySQL")})
suppressMessages(if(!require(mgcv)){install.packages("mgcv")})
suppressMessages(library(openxlsx))
suppressMessages(library(RMySQL))
suppressMessages(library(mgcv))
# if interactive, during the development, set to TRUE
interactive <- FALSE
if (interactive) {
setwd("/Users/Hans-Peter/Documents/Masters/14D003/project")
}
loadFileName <- "data/urb_cpop1.xlsx"
# load data
dat  <- read.xlsx(loadFileName, sheet = 1, startRow = 9, colNames = TRUE)
setwd("/Users/Hans-Peter/Documents/Masters/14D003/project")
loadFileName <- "data/urb_cpop1.xlsx"
dat  <- read.xlsx(loadFileName, sheet = 1, startRow = 9, colNames = TRUE)
dat  <- read.xlsx(loadFileName, sheet = 1, startRow = 9, rows = seq(1,3), colNames = TRUE)
dat  <- read.xlsx(loadFileName, sheet = 1, startRow = 9, rows = seq(9,12), colNames = TRUE)
dat  <- read.xlsx(loadFileName, sheet = 1, startRow = 9, rows = seq(9,1014), colNames = TRUE)
dat  <- read.xlsx(loadFileName, sheet = 1, rows = seq(9,1014), colNames = TRUE)
dat_ctry <- dat[nchar(dat$City) == 2,]
dat_city <- dat[nchar(dat$City) == 7,]
value <- dat_city[dat_city$City == "BE001C1", ][4]
value
as.numeric(value)
value <- as.numeric(dat_city[dat_city$City == "BE001C1", ][4])
value <- as.numeric(dat_city[dat_city$City == "RO504C1", ][4])
value <- dat_city[dat_city$City == "RO504C1", ][4]
value
if (value != ":") {
population <- as.numeric(value)
}
value <- dat_city[dat_city$City == "RO504C1", ][14]
if (value != ":") {
population <- as.numeric(value)
}
value
value <- dat_city[dat_city$City == "RO504C1", ][19]
if (value != ":") {
population <- as.numeric(value)
}
value
value <- dat_city[dat_city$City == "RO504C1", ][20]
value
if (value != ":") {
population <- as.numeric(value)
}
city <- "RO504C1"
year = 1991
query <- paste("INSERT INTO population",
"(cityID, year, population)",
"VALUES (", paste(city, year, population, collapse = ", "), ");")
query
query <- paste("INSERT INTO population",
"(cityID, year, population)",
"VALUES (\"", city, "\", \"", year, ",", population, ");")
query
query <- paste0("INSERT INTO population ",
"(cityID, year, population) ",
"VALUES (\"", city, "\", \"", year, ",", population, ");")
query
query <- paste0("INSERT INTO population ",
"(cityID, year, population) ",
"VALUES (\"", city, "\",", year, ",", population, ");")
query
